package components

import (
	"fmt"
	. "github.com/Kavantix/go-form/interfaces"
)

type SelectFormFieldConfig[T any] struct {
	FieldLabel  string
	FieldName   string
	Placeholder string
	Options     []struct{ Label, Value string }
	Required    bool
	FieldValue  func(row *T) string
}

var _ FormField[any] = &SelectFormFieldConfig[any]{}

templ SelectFormField[T any](config *SelectFormFieldConfig[T], value string) {
	@formField(config, formFieldDebounce{Millis: 20}) {
		<select
			x-bind="input"
			required?={ config.Required }
			class="select select-bordered"
			placeholder={ config.Placeholder }
			:class="valid ? '' : 'select-error'"
		>
			if !config.Required || value == "" {
				<option disabled?={ config.Required } selected?={ value == "" } value></option>
			}
			for _, option := range config.Options {
				<option selected?={ value == option.Value } value={ option.Value }>{ option.Label }</option>
			}
		</select>
	}
}

func (f *SelectFormFieldConfig[T]) RenderFormField(form FormConfig[T], value *T) templ.Component {
	val := ""
	if value != nil {
		val = f.Value(value)
	}
	return SelectFormField(f, val)
}

func (f *SelectFormFieldConfig[T]) Name() string {
	return f.FieldName
}

func (f *SelectFormFieldConfig[T]) Validator(value string) string {
	if value == "" {
		if f.Required {
			return fmt.Sprintf("This field is required")
		}
		return ""
	}
	for _, option := range f.Options {
		if option.Value == value {
			return ""
		}
	}
	return fmt.Sprintf("`%s` is not a valid option", value)
}

func (f *SelectFormFieldConfig[T]) Label() string {
	if f.Required {
		return f.FieldLabel + "*"
	}
	return f.FieldLabel
}

func (f *SelectFormFieldConfig[T]) Value(row *T) string {
	if row == nil {
		return ""
	}
	return f.FieldValue(row)
}
