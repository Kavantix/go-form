package components

import "fmt"

import . "github.com/Kavantix/go-form/interfaces"

type SelectFormFieldConfig[T any] struct {
	Label       string
	FieldName   string
	Placeholder string
	Options     []struct{ Label, Value string }
	Required    bool
	FieldValue  func(row *T) string
}

templ SelectFormField[T any](config (*SelectFormFieldConfig[T]), value string) {
	<label>
		{ config.Label }
		<select
 			required?={ config.Required }
 			x-model={ fmt.Sprintf(`fields["%s"]`, config.FieldName) }
 			@input.debounce={ "$dispatch('validate')" }
 			name={ config.FieldName }
 			placeholder={ config.Placeholder }
		>
			for _, option := range config.Options {
				<option selected?={ value == option.Value } value={ option.Value }>{ option.Label }</option>
			}
		</select>
		<p class="mt-2 text-sm text-red-600 dark:text-red-500" x-text={ fmt.Sprintf(`validationErrors["%s"]`, config.FieldName) }></p>
	</label>
}

func (f *SelectFormFieldConfig[T]) RenderFormField(form FormConfig[T], value *T) templ.Component {
	val := ""
	if value != nil {
		val = f.Value(value)
	}
	return SelectFormField[T](f, val)
}

func (f *SelectFormFieldConfig[T]) Name() string {
	return f.FieldName
}

func (f *SelectFormFieldConfig[T]) Value(row *T) string {
	return f.FieldValue(row)
}
