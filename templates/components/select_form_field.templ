package components

import . "github.com/Kavantix/go-form/interfaces"

type SelectFormFieldConfig[T any] struct {
	FieldLabel  string
	FieldName   string
	Placeholder string
	Options     []struct{ Label, Value string }
	Required    bool
	FieldValue  func(row *T) string
}

templ SelectFormField[T any](config (*SelectFormFieldConfig[T]), value string) {
	@formField(config, formFieldDebounce{Millis: 20}) {
		<select
			x-bind="input"
			required?={ config.Required }
			class="select select-bordered"
			placeholder={ config.Placeholder }
			:class="valid ? '' : 'select-error'"
		>
			for _, option := range config.Options {
				<option selected?={ value == option.Value } value={ option.Value }>{ option.Label }</option>
			}
		</select>
	}
}

func (f *SelectFormFieldConfig[T]) RenderFormField(form FormConfig[T], value *T) templ.Component {
	val := ""
	if value != nil {
		val = f.Value(value)
	}
	return SelectFormField[T](f, val)
}

func (f *SelectFormFieldConfig[T]) Name() string {
	return f.FieldName
}

func (f *SelectFormFieldConfig[T]) Label() string {
	return f.FieldLabel
}

func (f *SelectFormFieldConfig[T]) Value(row *T) string {
	if row == nil {
		return ""
	}
	return f.FieldValue(row)
}
