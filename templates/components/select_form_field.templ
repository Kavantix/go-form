package components

import . "github.com/Kavantix/go-form/interfaces"

type SelectFormFieldConfig[T any] struct {
	FieldLabel  string
	FieldName   string
	Placeholder string
	Options     []struct{ Label, Value string }
	Required    bool
	FieldValue  func(row *T) string
}

templ SelectFormField[T any](config (*SelectFormFieldConfig[T]), value string) {
	@formField(config) {
		<select
 			:id="fieldId"
 			required?={ config.Required }
 			x-model="value"
 			@input.debounce.50ms={ "$dispatch('validate')" }
 			name={ config.FieldName }
 			:aria-invalid="!valid"
 			:aria-errormessage="errorId"
 			class="cursor-pointer block mb-2 w-full p-4 sm:text-md rounded-lg"
 			:class={ `
      valid
      ? "bg-gray-50 text-gray-900 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
      : "bg-red-50 border border-red-500 text-red-900 placeholder-red-700 focus:ring-red-500 focus:border-red-500"
      ` }
 			placeholder={ config.Placeholder }
		>
			for _, option := range config.Options {
				<option selected?={ value == option.Value } value={ option.Value }>{ option.Label }</option>
			}
		</select>
	}
}

func (f *SelectFormFieldConfig[T]) RenderFormField(form FormConfig[T], value *T) templ.Component {
	val := ""
	if value != nil {
		val = f.Value(value)
	}
	return SelectFormField[T](f, val)
}

func (f *SelectFormFieldConfig[T]) Name() string {
	return f.FieldName
}

func (f *SelectFormFieldConfig[T]) Label() string {
	return f.FieldLabel
}

func (f *SelectFormFieldConfig[T]) Value(row *T) string {
	return f.FieldValue(row)
}
