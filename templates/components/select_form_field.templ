package components

import . "github.com/Kavantix/go-form/interfaces"

type SelectFormFieldConfig[T any] struct {
	Label       string
	FieldName   string
	Placeholder string
	Options     []struct{ Label, Value string }
	Required    bool
	Value       func(row *T) string
}

templ SelectFormField[T any](config (*SelectFormFieldConfig[T]), value string, validationError string) {
	<label>
		{ config.Label }
		<select
 			required?={ config.Required }
 			name={ config.FieldName }
 			if validationError != "" {
				class="cursor-pointer block mb-2 w-full p-4 bg-red-50 border border-red-500 text-red-900 placeholder-red-700 text-sm rounded-lg focus:ring-red-500"
			} else {
				class="cursor-pointer block mb-2 w-full p-4 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 sm:text-md focus:ring-blue-500 focus:border-blue-500"
			}
 			placeholder={ config.Placeholder }
		>
			for _, option := range config.Options {
				<option selected?={ value == option.Value } value={ option.Value }>{ option.Label }</option>
			}
		</select>
		if validationError != "" {
			<p class="mt-2 text-sm text-red-600 dark:text-red-500">{ validationError }</p>
		}
	</label>
}

func (f *SelectFormFieldConfig[T]) RenderFormField(form FormConfig[T], value *T, validationError string) templ.Component {
	val := ""
	if value != nil {
		val = f.Value(value)
	}
	return SelectFormField[T](f, val, validationError)
}
func (f *SelectFormFieldConfig[T]) Name() string {
	return f.FieldName
}
