package components

import "fmt"
import "strings"
import . "github.com/Kavantix/go-form/interfaces"

templ formField[T any](config FormField[T], opts ...formFieldOption) {
	<div
 		x-data={ fmt.Sprintf(`formField("%s", %s)`, config.Name(), buildFormFieldOptions(opts)) }
	>
		<label
 			:for="fieldId"
		>
			{ config.Label() }
		</label>
		{ children... }
		<template x-if="!valid">
			<p
 				:id="errorId"
 				aria-live="true"
 				class="mt-2 text-sm text-red-600 dark:text-red-500"
 				x-text="error"
			></p>
		</template>
	</div>
}

type formFieldOption interface {
	formFieldOption()
}

type formFieldDebounce struct {
	Millis int
}

func (t formFieldDebounce) formFieldOption() {}

func buildFormFieldOptions(opts []formFieldOption) string {
	builder := strings.Builder{}
	builder.WriteByte('{')
	for _, option := range opts {
		switch option.(type) {
		case formFieldDebounce:
			fmt.Fprintf(&builder, `"debounce": "%dms",`, option.(formFieldDebounce).Millis)
		}
	}
	builder.WriteByte('}')
	return builder.String()

}
