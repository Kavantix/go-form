package components

import (
	"encoding/json"
	"fmt"
	. "github.com/Kavantix/go-form/interfaces"
	"log"
)

type Resource[T any] interface {
	FormConfig() FormConfig[T]
}

templ Form[T any](resource Resource[T], value *T, validationErrors map[string]string) {
	@form(resource.FormConfig(), value, validationErrors) {
		{ children... }
	}
}

func buildData[T any](config FormConfig[T], row *T, validationErrors map[string]string) string {
	fields := map[string]string{}
	for _, field := range config.Fields {
		fields[field.Name()] = field.Value(row)
	}
	data := map[string]any{
		"validationErrors": validationErrors,
		"fields":           fields,
	}
	result, err := json.Marshal(data)
	if err != nil {
		log.Panicf("json Marshal of fields failed: %s", err)
	}
	return string(result)
}

templ form[T any](config FormConfig[T], row *T, validationErrors map[string]string) {
	<form
		x-data={ buildData(config, row, validationErrors) }
		@validate={ fmt.Sprintf(`validateForm("%s/validate", $data)`, config.SaveUrl(row)) }
		class="mb-6 px-8 py-4"
		hx-post={ string(templ.URL(config.SaveUrl(row))) }
		hx-target="main"
	>
		for _, field := range config.Fields {
			@field.RenderFormField(config, row)
		}
		<br/>
		<div class="flex gap-2">
			{ children... }
		</div>
	</form>
}
