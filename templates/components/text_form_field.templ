package components

import "fmt"

import . "github.com/Kavantix/go-form/interfaces"

type TextFormFieldConfig[T any] struct {
	Label       string
	FieldName   string
	Placeholder string
	Type        string
	Required    bool
	FieldValue  func(row *T) string
}

templ TextFormField[T any](form (FormConfig[T]), config (*TextFormFieldConfig[T]), value *T) {
	<label
 		for={ config.FieldName }
	>
		{ config.Label }
		<input
 			id={ fmt.Sprintf("field-%s", config.FieldName) }
 			x-model={ fmt.Sprintf(`fields["%s"]`, config.FieldName) }
 			@input.debounce={ "$dispatch('validate')" }
 			required?={ config.Required }
 			if config.Type == "" {
				type="text"
			} else {
				type={ config.Type }
			}
 			name={ config.FieldName }
 			class="block mb-2 w-full p-4 border rounded-lg sm:text-md"
 			:class={ fmt.Sprintf(`
        $data.validationErrors["%s"] == undefined
        ? "bg-gray-50 border-gray-300 text-gray-900 focus:ring-blue-500 focus:border-blue-500"
        : "bg-red-50 border-red-500 text-red-900 placeholder-red-700 focus:ring-red-500 focus:border-red-500"
      `, config.FieldName) }
 			placeholder={ config.Placeholder }
		/>
		<p class="mt-2 text-sm text-red-600 dark:text-red-500" x-text={ fmt.Sprintf(`validationErrors["%s"]`, config.FieldName) }></p>
	</label>
}

func (f *TextFormFieldConfig[T]) RenderFormField(form FormConfig[T], value *T) templ.Component {
	return TextFormField[T](form, f, value)
}

func (f *TextFormFieldConfig[T]) Name() string {
	return f.FieldName
}

func (f *TextFormFieldConfig[T]) Value(row *T) string {
	return f.FieldValue(row)
}
