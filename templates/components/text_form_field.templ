package components

import . "github.com/Kavantix/go-form/interfaces"

type TextFormFieldConfig[T any] struct {
	FieldLabel  string
	FieldName   string
	Placeholder string
	Type        string
	Required    bool
	FieldValue  func(row *T) string
}

templ TextField(required bool, fieldType, name, placeholder string) {
	<input
		x-bind="input"
		required?={ required }
		aria-required?={ required }
		if fieldType == "" {
			type="text"
		} else {
			type={ fieldType }
		}
		if name != "" {
			name={ name }
		}
		class="input input-bordered"
		:class="valid ? '' : 'input-error'"
		placeholder={ placeholder }
	/>
}

templ TextFormField[T any](form (FormConfig[T]), config (*TextFormFieldConfig[T]), value *T) {
	@formField(config) {
		@TextField(
		config.Required,
		config.Type,
    "",
		config.Placeholder,
		)
	}
}

func (f *TextFormFieldConfig[T]) RenderFormField(form FormConfig[T], value *T) templ.Component {
	return TextFormField[T](form, f, value)
}

func (f *TextFormFieldConfig[T]) Name() string {
	return f.FieldName
}

func (f *TextFormFieldConfig[T]) Label() string {
	return f.FieldLabel
}

func (f *TextFormFieldConfig[T]) Value(row *T) string {
	if row == nil {
		return ""
	}
	return f.FieldValue(row)
}
