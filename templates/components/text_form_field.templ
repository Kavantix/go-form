package components

import . "github.com/Kavantix/go-form/interfaces"

type TextFormFieldConfig[T any] struct {
	FieldLabel  string
	FieldName   string
	Placeholder string
	Type        string
	Required    bool
	FieldValue  func(row *T) string
}

templ TextFormField[T any](form (FormConfig[T]), config (*TextFormFieldConfig[T]), value *T) {
	@formField(config) {
		<input
 			x-bind="input"
 			required?={ config.Required }
 			aria-required?={ config.Required }
 			if config.Type == "" {
				type="text"
			} else {
				type={ config.Type }
			}
 			class="block mb-2 w-full p-4 border rounded-lg sm:text-md"
 			:class={ `
        valid
        ? "bg-gray-50 border-gray-300 text-gray-900 focus:ring-blue-500 focus:border-blue-500"
        : "bg-red-50 border-red-500 text-red-900 placeholder-red-700 focus:ring-red-500 focus:border-red-500"
      ` }
 			placeholder={ config.Placeholder }
		/>
	}
}

func (f *TextFormFieldConfig[T]) RenderFormField(form FormConfig[T], value *T) templ.Component {
	return TextFormField[T](form, f, value)
}

func (f *TextFormFieldConfig[T]) Name() string {
	return f.FieldName
}

func (f *TextFormFieldConfig[T]) Label() string {
	return f.FieldLabel
}

func (f *TextFormFieldConfig[T]) Value(row *T) string {
	return f.FieldValue(row)
}
