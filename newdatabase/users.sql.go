// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package newdatabase

import (
	"context"
	"time"
)

const getUser = `-- name: GetUser :one
select 
  id, name, email, date_of_birth
from displayable_users
where id = $1
limit 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (DisplayableUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i DisplayableUser
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.Email,
		&i.DateOfBirth,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select 
  id, name, email, date_of_birth
from displayable_users
where email = $1
limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (DisplayableUser, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i DisplayableUser
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.Email,
		&i.DateOfBirth,
	)
	return i, err
}

const getUsersPage = `-- name: GetUsersPage :many
select 
  id, name, email, date_of_birth
from displayable_users
order by id
limit $1 offset $2
`

func (q *Queries) GetUsersPage(ctx context.Context, limit int32, offset int32) ([]DisplayableUser, error) {
	rows, err := q.db.Query(ctx, getUsersPage, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DisplayableUser{}
	for rows.Next() {
		var i DisplayableUser
		if err := rows.Scan(
			&i.Id,
			&i.Name,
			&i.Email,
			&i.DateOfBirth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
insert into users(
  name,
  email,
  date_of_birth
) values ($1, $2, $3) returning id
`

func (q *Queries) InsertUser(ctx context.Context, name string, email string, dateOfBirth time.Time) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, name, email, dateOfBirth)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :exec
update users set
  name=$1,
  email=$2,
  date_of_birth=$3
where id = $4
`

type UpdateUserParams struct {
	Name        string    `db:"name"`
	Email       string    `db:"email"`
	DateOfBirth time.Time `db:"date_of_birth"`
	Id          int32     `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.DateOfBirth,
		arg.Id,
	)
	return err
}

const userWithEmailExists = `-- name: UserWithEmailExists :one
select exists(
  select
  from users
  where email = $1
    and id != $2
)
`

func (q *Queries) UserWithEmailExists(ctx context.Context, email string, excludingID int32) (bool, error) {
	row := q.db.QueryRow(ctx, userWithEmailExists, email, excludingID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
