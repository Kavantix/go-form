// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const getUser = `-- name: GetUser :one
select 
  id, name, email, date_of_birth
from displayable_users
where id = $1
limit 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (DisplayableUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i DisplayableUser
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.Email,
		&i.DateOfBirth,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select 
  id, name, email, date_of_birth
from displayable_users
where email = $1
limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (DisplayableUser, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i DisplayableUser
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.Email,
		&i.DateOfBirth,
	)
	return i, err
}

const insertReloginToken = `-- name: InsertReloginToken :one
insert into relogin_tokens (
  user_id,
  token
) values ($1, $2) returning id
`

func (q *Queries) InsertReloginToken(ctx context.Context, userID int32, token string) (int32, error) {
	row := q.db.QueryRow(ctx, insertReloginToken, userID, token)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const userWithEmailExists = `-- name: UserWithEmailExists :one
select exists(
  select
  from users
  where email = $1
    and id != $2
)
`

func (q *Queries) UserWithEmailExists(ctx context.Context, email string, excludingID int32) (bool, error) {
	row := q.db.QueryRow(ctx, userWithEmailExists, email, excludingID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const consumeReloginToken = `-- name: consumeReloginToken :execrows
delete from relogin_tokens
where token = $1
  and user_id = $2
  and created_at > $3
`

func (q *Queries) consumeReloginToken(ctx context.Context, token string, userID int32, createdAfter time.Time) (int64, error) {
	result, err := q.db.Exec(ctx, consumeReloginToken, token, userID, createdAfter)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getUsersPage = `-- name: getUsersPage :many
select 
  id, name, email, date_of_birth
from displayable_users
order by id
limit $1 offset $2
`

func (q *Queries) getUsersPage(ctx context.Context, limit int32, offset int32) ([]DisplayableUser, error) {
	rows, err := q.db.Query(ctx, getUsersPage, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DisplayableUser{}
	for rows.Next() {
		var i DisplayableUser
		if err := rows.Scan(
			&i.Id,
			&i.Name,
			&i.Email,
			&i.DateOfBirth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: insertUser :one
insert into users(
  name,
  email,
  date_of_birth
) values ($1, $2, $3) returning id
`

func (q *Queries) insertUser(ctx context.Context, name string, email string, dateOfBirth time.Time) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, name, email, dateOfBirth)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: updateUser :exec
update users set
  name=$2,
  email=$3,
  date_of_birth=$4
where id = $1
`

type updateUserParams struct {
	Id          int32     `db:"id"`
	Name        string    `db:"name"`
	Email       string    `db:"email"`
	DateOfBirth time.Time `db:"date_of_birth"`
}

func (q *Queries) updateUser(ctx context.Context, arg updateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Id,
		arg.Name,
		arg.Email,
		arg.DateOfBirth,
	)
	return err
}
